#!/usr/bin/env node

/**
 * Module dependencies.
 */
const app = require('../app');
const debug = require('debug')('nodeexpressreactive4:server');
const http = require('http');
const { listenToChanges, getCollections } = require('../db');
const WSS = require('../wss');

const wss = new WSS();

/**
 * Normalize a port into a number, string, or false.
 */
const normalizePort = (val) => {
  const port = parseInt(val, 10);
  // named pipe ? val : port number ? port : false
  return isNaN(port)
    ? val
    : (port >= 0
      ? port
      : false
    );
};

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
wss.setup(server);
getCollections(colls => {
  colls.forEach(c => {
    listenToChanges(c, wss.notify(c));
  });
  console.log('APP: Listening collections done', colls);
});

app.get('/subscribe', (req, res, next) => {
  const channel = req.params.channel;
  listenToChanges('stellars', wss.notifyAll);
  listenToChanges(channel, wss.notify(channel));
});


server.listen(port);
server.on('error', (error) => {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? `Pipe ${port}`
    : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
  case 'EACCES':
    console.error(`${bind} requires elevated privileges`);
    process.exit(1);
    break;
  case 'EADDRINUSE':
    console.error(`${bind} is already in use`);
    process.exit(1);
    break;
  default:
    throw error;
  }
});
server.on('listening', () => {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? `pipe ${addr}`
    : `port ${addr.port}`;
  debug('Listening on ' + bind);
});
