#!/usr/bin/env node
"use strict";

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var debug_1 = __importDefault(require("debug"));

var http_1 = require("http");

var app_1 = __importDefault(require("../app"));

var mix_1 = __importDefault(require("../utils/mix"));

var debug = debug_1["default"]('nodeexpressreactive4:server');
/**
 * Normalize a port into a number, string, or false.
 */

var normalizePort = function normalizePort(val) {
  var port = parseInt(val, 10); // named pipe ? val : port number ? port : false

  return isNaN(port) ? val : port >= 0 ? port : false;
};
/**
 * Get port from environment and store in Express.
 */


var port = normalizePort(process.env.PORT || '3001');
app_1["default"].set('port', port);
/**
 * Create HTTP server.
 */

var server = http_1.createServer(app_1["default"]);
/**
 * Listen on provided port, on all network interfaces.
 */

var mix = new mix_1["default"]({
  server: server
});
mix.start();
server.listen(port);
server.on('error', function (error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? "Pipe ".concat(port) : "Port ".concat(port); // handle specific listen errors with friendly messages

  switch (error.code) {
    case 'EACCES':
      console.error("".concat(bind, " requires elevated privileges"));
      process.exit(1);
      break;

    case 'EADDRINUSE':
      console.error("".concat(bind, " is already in use"));
      process.exit(1);
      break;

    default:
      throw error;
  }
});
server.on('listening', function () {
  var addr = getOrThrow(server.address());
  var bind = typeof addr === 'string' ? "pipe ".concat(addr) : "port ".concat(addr.port);
  debug('Listening on ' + bind);
});

function getOrThrow(val) {
  if (val) {
    return val;
  }

  throw Error("Failed Assertion on variable. Must not be null: ".concat(val));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3RzL2Jpbi93d3cuanMiXSwibmFtZXMiOlsiX19pbXBvcnREZWZhdWx0IiwibW9kIiwiX19lc01vZHVsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVidWdfMSIsInJlcXVpcmUiLCJodHRwXzEiLCJhcHBfMSIsIm1peF8xIiwiZGVidWciLCJub3JtYWxpemVQb3J0IiwidmFsIiwicG9ydCIsInBhcnNlSW50IiwiaXNOYU4iLCJwcm9jZXNzIiwiZW52IiwiUE9SVCIsInNldCIsInNlcnZlciIsImNyZWF0ZVNlcnZlciIsIm1peCIsInN0YXJ0IiwibGlzdGVuIiwib24iLCJlcnJvciIsInN5c2NhbGwiLCJiaW5kIiwiY29kZSIsImNvbnNvbGUiLCJleGl0IiwiYWRkciIsImdldE9yVGhyb3ciLCJhZGRyZXNzIiwiRXJyb3IiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBQ0EsSUFBSUEsZUFBZSxHQUFJLFVBQVEsU0FBS0EsZUFBZCxJQUFrQyxVQUFVQyxHQUFWLEVBQWU7QUFDbkUsU0FBUUEsR0FBRyxJQUFJQSxHQUFHLENBQUNDLFVBQVosR0FBMEJELEdBQTFCLEdBQWdDO0FBQUUsZUFBV0E7QUFBYixHQUF2QztBQUNILENBRkQ7O0FBR0FFLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFBRUMsRUFBQUEsS0FBSyxFQUFFO0FBQVQsQ0FBN0M7O0FBQ0EsSUFBTUMsT0FBTyxHQUFHUCxlQUFlLENBQUNRLE9BQU8sQ0FBQyxPQUFELENBQVIsQ0FBL0I7O0FBQ0EsSUFBTUMsTUFBTSxHQUFHRCxPQUFPLENBQUMsTUFBRCxDQUF0Qjs7QUFDQSxJQUFNRSxLQUFLLEdBQUdWLGVBQWUsQ0FBQ1EsT0FBTyxDQUFDLFFBQUQsQ0FBUixDQUE3Qjs7QUFDQSxJQUFNRyxLQUFLLEdBQUdYLGVBQWUsQ0FBQ1EsT0FBTyxDQUFDLGNBQUQsQ0FBUixDQUE3Qjs7QUFDQSxJQUFNSSxLQUFLLEdBQUdMLE9BQU8sV0FBUCxDQUFnQiw2QkFBaEIsQ0FBZDtBQUNBOzs7O0FBR0EsSUFBTU0sYUFBYSxHQUFHLFNBQWhCQSxhQUFnQixDQUFDQyxHQUFELEVBQVM7QUFDM0IsTUFBTUMsSUFBSSxHQUFHQyxRQUFRLENBQUNGLEdBQUQsRUFBTSxFQUFOLENBQXJCLENBRDJCLENBRTNCOztBQUNBLFNBQU9HLEtBQUssQ0FBQ0YsSUFBRCxDQUFMLEdBQ0RELEdBREMsR0FFQUMsSUFBSSxJQUFJLENBQVIsR0FDR0EsSUFESCxHQUVHLEtBSlY7QUFLSCxDQVJEO0FBU0E7Ozs7O0FBR0EsSUFBTUEsSUFBSSxHQUFHRixhQUFhLENBQUNLLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxJQUFaLElBQW9CLE1BQXJCLENBQTFCO0FBQ0FWLEtBQUssV0FBTCxDQUFjVyxHQUFkLENBQWtCLE1BQWxCLEVBQTBCTixJQUExQjtBQUNBOzs7O0FBR0EsSUFBTU8sTUFBTSxHQUFHYixNQUFNLENBQUNjLFlBQVAsQ0FBb0JiLEtBQUssV0FBekIsQ0FBZjtBQUNBOzs7O0FBR0EsSUFBTWMsR0FBRyxHQUFHLElBQUliLEtBQUssV0FBVCxDQUFrQjtBQUFFVyxFQUFBQSxNQUFNLEVBQU5BO0FBQUYsQ0FBbEIsQ0FBWjtBQUNBRSxHQUFHLENBQUNDLEtBQUo7QUFDQUgsTUFBTSxDQUFDSSxNQUFQLENBQWNYLElBQWQ7QUFDQU8sTUFBTSxDQUFDSyxFQUFQLENBQVUsT0FBVixFQUFtQixVQUFDQyxLQUFELEVBQVc7QUFDMUIsTUFBSUEsS0FBSyxDQUFDQyxPQUFOLEtBQWtCLFFBQXRCLEVBQWdDO0FBQzVCLFVBQU1ELEtBQU47QUFDSDs7QUFDRCxNQUFNRSxJQUFJLEdBQUcsT0FBT2YsSUFBUCxLQUFnQixRQUFoQixrQkFDQ0EsSUFERCxtQkFFQ0EsSUFGRCxDQUFiLENBSjBCLENBTzFCOztBQUNBLFVBQVFhLEtBQUssQ0FBQ0csSUFBZDtBQUNJLFNBQUssUUFBTDtBQUNJQyxNQUFBQSxPQUFPLENBQUNKLEtBQVIsV0FBaUJFLElBQWpCO0FBQ0FaLE1BQUFBLE9BQU8sQ0FBQ2UsSUFBUixDQUFhLENBQWI7QUFDQTs7QUFDSixTQUFLLFlBQUw7QUFDSUQsTUFBQUEsT0FBTyxDQUFDSixLQUFSLFdBQWlCRSxJQUFqQjtBQUNBWixNQUFBQSxPQUFPLENBQUNlLElBQVIsQ0FBYSxDQUFiO0FBQ0E7O0FBQ0o7QUFDSSxZQUFNTCxLQUFOO0FBVlI7QUFZSCxDQXBCRDtBQXFCQU4sTUFBTSxDQUFDSyxFQUFQLENBQVUsV0FBVixFQUF1QixZQUFNO0FBQ3pCLE1BQU1PLElBQUksR0FBR0MsVUFBVSxDQUFDYixNQUFNLENBQUNjLE9BQVAsRUFBRCxDQUF2QjtBQUNBLE1BQU1OLElBQUksR0FBRyxPQUFPSSxJQUFQLEtBQWdCLFFBQWhCLGtCQUNDQSxJQURELG1CQUVDQSxJQUFJLENBQUNuQixJQUZOLENBQWI7QUFHQUgsRUFBQUEsS0FBSyxDQUFDLGtCQUFrQmtCLElBQW5CLENBQUw7QUFDSCxDQU5EOztBQU9BLFNBQVNLLFVBQVQsQ0FBb0JyQixHQUFwQixFQUF5QjtBQUNyQixNQUFJQSxHQUFKLEVBQVM7QUFDTCxXQUFPQSxHQUFQO0FBQ0g7O0FBQ0QsUUFBTXVCLEtBQUssMkRBQW9EdkIsR0FBcEQsRUFBWDtBQUNIIiwic291cmNlc0NvbnRlbnQiOlsiIyEvdXNyL2Jpbi9lbnYgbm9kZVxyXG5cInVzZSBzdHJpY3RcIjtcclxudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBkZWJ1Z18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJkZWJ1Z1wiKSk7XHJcbmNvbnN0IGh0dHBfMSA9IHJlcXVpcmUoXCJodHRwXCIpO1xyXG5jb25zdCBhcHBfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vYXBwXCIpKTtcclxuY29uc3QgbWl4XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL21peFwiKSk7XHJcbmNvbnN0IGRlYnVnID0gZGVidWdfMS5kZWZhdWx0KCdub2RlZXhwcmVzc3JlYWN0aXZlNDpzZXJ2ZXInKTtcclxuLyoqXHJcbiAqIE5vcm1hbGl6ZSBhIHBvcnQgaW50byBhIG51bWJlciwgc3RyaW5nLCBvciBmYWxzZS5cclxuICovXHJcbmNvbnN0IG5vcm1hbGl6ZVBvcnQgPSAodmFsKSA9PiB7XHJcbiAgICBjb25zdCBwb3J0ID0gcGFyc2VJbnQodmFsLCAxMCk7XHJcbiAgICAvLyBuYW1lZCBwaXBlID8gdmFsIDogcG9ydCBudW1iZXIgPyBwb3J0IDogZmFsc2VcclxuICAgIHJldHVybiBpc05hTihwb3J0KVxyXG4gICAgICAgID8gdmFsXHJcbiAgICAgICAgOiAocG9ydCA+PSAwXHJcbiAgICAgICAgICAgID8gcG9ydFxyXG4gICAgICAgICAgICA6IGZhbHNlKTtcclxufTtcclxuLyoqXHJcbiAqIEdldCBwb3J0IGZyb20gZW52aXJvbm1lbnQgYW5kIHN0b3JlIGluIEV4cHJlc3MuXHJcbiAqL1xyXG5jb25zdCBwb3J0ID0gbm9ybWFsaXplUG9ydChwcm9jZXNzLmVudi5QT1JUIHx8ICczMDAxJyk7XHJcbmFwcF8xLmRlZmF1bHQuc2V0KCdwb3J0JywgcG9ydCk7XHJcbi8qKlxyXG4gKiBDcmVhdGUgSFRUUCBzZXJ2ZXIuXHJcbiAqL1xyXG5jb25zdCBzZXJ2ZXIgPSBodHRwXzEuY3JlYXRlU2VydmVyKGFwcF8xLmRlZmF1bHQpO1xyXG4vKipcclxuICogTGlzdGVuIG9uIHByb3ZpZGVkIHBvcnQsIG9uIGFsbCBuZXR3b3JrIGludGVyZmFjZXMuXHJcbiAqL1xyXG5jb25zdCBtaXggPSBuZXcgbWl4XzEuZGVmYXVsdCh7IHNlcnZlciB9KTtcclxubWl4LnN0YXJ0KCk7XHJcbnNlcnZlci5saXN0ZW4ocG9ydCk7XHJcbnNlcnZlci5vbignZXJyb3InLCAoZXJyb3IpID0+IHtcclxuICAgIGlmIChlcnJvci5zeXNjYWxsICE9PSAnbGlzdGVuJykge1xyXG4gICAgICAgIHRocm93IGVycm9yO1xyXG4gICAgfVxyXG4gICAgY29uc3QgYmluZCA9IHR5cGVvZiBwb3J0ID09PSAnc3RyaW5nJ1xyXG4gICAgICAgID8gYFBpcGUgJHtwb3J0fWBcclxuICAgICAgICA6IGBQb3J0ICR7cG9ydH1gO1xyXG4gICAgLy8gaGFuZGxlIHNwZWNpZmljIGxpc3RlbiBlcnJvcnMgd2l0aCBmcmllbmRseSBtZXNzYWdlc1xyXG4gICAgc3dpdGNoIChlcnJvci5jb2RlKSB7XHJcbiAgICAgICAgY2FzZSAnRUFDQ0VTJzpcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgJHtiaW5kfSByZXF1aXJlcyBlbGV2YXRlZCBwcml2aWxlZ2VzYCk7XHJcbiAgICAgICAgICAgIHByb2Nlc3MuZXhpdCgxKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnRUFERFJJTlVTRSc6XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYCR7YmluZH0gaXMgYWxyZWFkeSBpbiB1c2VgKTtcclxuICAgICAgICAgICAgcHJvY2Vzcy5leGl0KDEpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcclxuICAgIH1cclxufSk7XHJcbnNlcnZlci5vbignbGlzdGVuaW5nJywgKCkgPT4ge1xyXG4gICAgY29uc3QgYWRkciA9IGdldE9yVGhyb3coc2VydmVyLmFkZHJlc3MoKSk7XHJcbiAgICBjb25zdCBiaW5kID0gdHlwZW9mIGFkZHIgPT09ICdzdHJpbmcnXHJcbiAgICAgICAgPyBgcGlwZSAke2FkZHJ9YFxyXG4gICAgICAgIDogYHBvcnQgJHthZGRyLnBvcnR9YDtcclxuICAgIGRlYnVnKCdMaXN0ZW5pbmcgb24gJyArIGJpbmQpO1xyXG59KTtcclxuZnVuY3Rpb24gZ2V0T3JUaHJvdyh2YWwpIHtcclxuICAgIGlmICh2YWwpIHtcclxuICAgICAgICByZXR1cm4gdmFsO1xyXG4gICAgfVxyXG4gICAgdGhyb3cgRXJyb3IoYEZhaWxlZCBBc3NlcnRpb24gb24gdmFyaWFibGUuIE11c3Qgbm90IGJlIG51bGw6ICR7dmFsfWApO1xyXG59XHJcbiJdfQ==