"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  }
  result["default"] = mod;
  return result;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var fs_1 = __importDefault(require("fs"));

var db_1 = __importStar(require("./db"));

fs_1["default"].readFile('./data/estrellas.csv', 'utf8', function (err, content) {
  if (err) throw Error(err);
  var separator = ',';
  var data = content.trim().split('\n');
  var keys = data[0].toLowerCase().trim().split(separator);
  var stars = data.slice(1).map(function (s) {
    return s.trim().split(separator).reduce(function (o, s, i) {
      o[keys[i]] = isNaN(s) || s === '' ? s : +s;
      return o;
    }, {});
  });

  (function _callee() {
    return _regenerator["default"].async(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _regenerator["default"].awrap(db_1["default"].execQuery(db_1.Functions.createMany, 'stars', {}, {
              data: stars
            }));

          case 2:
            console.log('Loading done');

          case 3:
          case "end":
            return _context.stop();
        }
      }
    });
  })();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3RzL3V0aWxzL2xvYWQuanMiXSwibmFtZXMiOlsiX19pbXBvcnREZWZhdWx0IiwibW9kIiwiX19lc01vZHVsZSIsIl9faW1wb3J0U3RhciIsInJlc3VsdCIsImsiLCJPYmplY3QiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImZzXzEiLCJyZXF1aXJlIiwiZGJfMSIsInJlYWRGaWxlIiwiZXJyIiwiY29udGVudCIsIkVycm9yIiwic2VwYXJhdG9yIiwiZGF0YSIsInRyaW0iLCJzcGxpdCIsImtleXMiLCJ0b0xvd2VyQ2FzZSIsInN0YXJzIiwic2xpY2UiLCJtYXAiLCJzIiwicmVkdWNlIiwibyIsImkiLCJpc05hTiIsImV4ZWNRdWVyeSIsIkZ1bmN0aW9ucyIsImNyZWF0ZU1hbnkiLCJjb25zb2xlIiwibG9nIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0FBQ0EsSUFBSUEsZUFBZSxHQUFJLFVBQVEsU0FBS0EsZUFBZCxJQUFrQyxVQUFVQyxHQUFWLEVBQWU7QUFDbkUsU0FBUUEsR0FBRyxJQUFJQSxHQUFHLENBQUNDLFVBQVosR0FBMEJELEdBQTFCLEdBQWdDO0FBQUUsZUFBV0E7QUFBYixHQUF2QztBQUNILENBRkQ7O0FBR0EsSUFBSUUsWUFBWSxHQUFJLFVBQVEsU0FBS0EsWUFBZCxJQUErQixVQUFVRixHQUFWLEVBQWU7QUFDN0QsTUFBSUEsR0FBRyxJQUFJQSxHQUFHLENBQUNDLFVBQWYsRUFBMkIsT0FBT0QsR0FBUDtBQUMzQixNQUFJRyxNQUFNLEdBQUcsRUFBYjtBQUNBLE1BQUlILEdBQUcsSUFBSSxJQUFYLEVBQWlCLEtBQUssSUFBSUksQ0FBVCxJQUFjSixHQUFkO0FBQW1CLFFBQUlLLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsSUFBdEIsQ0FBMkJQLEdBQTNCLEVBQWdDSSxDQUFoQyxDQUFKLEVBQXdDRCxNQUFNLENBQUNDLENBQUQsQ0FBTixHQUFZSixHQUFHLENBQUNJLENBQUQsQ0FBZjtBQUEzRDtBQUNqQkQsRUFBQUEsTUFBTSxDQUFDLFNBQUQsQ0FBTixHQUFvQkgsR0FBcEI7QUFDQSxTQUFPRyxNQUFQO0FBQ0gsQ0FORDs7QUFPQUUsTUFBTSxDQUFDRyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUFFQyxFQUFBQSxLQUFLLEVBQUU7QUFBVCxDQUE3Qzs7QUFDQSxJQUFNQyxJQUFJLEdBQUdaLGVBQWUsQ0FBQ2EsT0FBTyxDQUFDLElBQUQsQ0FBUixDQUE1Qjs7QUFDQSxJQUFNQyxJQUFJLEdBQUdYLFlBQVksQ0FBQ1UsT0FBTyxDQUFDLE1BQUQsQ0FBUixDQUF6Qjs7QUFDQUQsSUFBSSxXQUFKLENBQWFHLFFBQWIsQ0FBc0Isc0JBQXRCLEVBQThDLE1BQTlDLEVBQXNELFVBQUNDLEdBQUQsRUFBTUMsT0FBTixFQUFrQjtBQUNwRSxNQUFJRCxHQUFKLEVBQ0ksTUFBTUUsS0FBSyxDQUFDRixHQUFELENBQVg7QUFDSixNQUFNRyxTQUFTLEdBQUcsR0FBbEI7QUFDQSxNQUFJQyxJQUFJLEdBQUdILE9BQU8sQ0FBQ0ksSUFBUixHQUFlQyxLQUFmLENBQXFCLElBQXJCLENBQVg7QUFDQSxNQUFNQyxJQUFJLEdBQUdILElBQUksQ0FBQyxDQUFELENBQUosQ0FDUkksV0FEUSxHQUVSSCxJQUZRLEdBR1JDLEtBSFEsQ0FHRkgsU0FIRSxDQUFiO0FBSUEsTUFBTU0sS0FBSyxHQUFHTCxJQUFJLENBQ2JNLEtBRFMsQ0FDSCxDQURHLEVBRVRDLEdBRlMsQ0FFTCxVQUFBQyxDQUFDLEVBQUk7QUFDVixXQUFPQSxDQUFDLENBQ0hQLElBREUsR0FFRkMsS0FGRSxDQUVJSCxTQUZKLEVBR0ZVLE1BSEUsQ0FHSyxVQUFDQyxDQUFELEVBQUlGLENBQUosRUFBT0csQ0FBUCxFQUFhO0FBQ3JCRCxNQUFBQSxDQUFDLENBQUNQLElBQUksQ0FBQ1EsQ0FBRCxDQUFMLENBQUQsR0FBYUMsS0FBSyxDQUFDSixDQUFELENBQUwsSUFBWUEsQ0FBQyxLQUFLLEVBQWxCLEdBQXVCQSxDQUF2QixHQUEyQixDQUFDQSxDQUF6QztBQUNBLGFBQU9FLENBQVA7QUFDSCxLQU5NLEVBTUosRUFOSSxDQUFQO0FBT0gsR0FWYSxDQUFkOztBQVdBLEdBQUM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsaURBQ1NoQixJQUFJLFdBQUosQ0FBYW1CLFNBQWIsQ0FBdUJuQixJQUFJLENBQUNvQixTQUFMLENBQWVDLFVBQXRDLEVBQWtELE9BQWxELEVBQTJELEVBQTNELEVBQStEO0FBQUVmLGNBQUFBLElBQUksRUFBRUs7QUFBUixhQUEvRCxDQURUOztBQUFBO0FBRUdXLFlBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLGNBQVo7O0FBRkg7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsR0FBRDtBQUlILENBeEJEIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XHJcbn07XHJcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xyXG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcclxuICAgIHZhciByZXN1bHQgPSB7fTtcclxuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSByZXN1bHRba10gPSBtb2Rba107XHJcbiAgICByZXN1bHRbXCJkZWZhdWx0XCJdID0gbW9kO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBmc18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJmc1wiKSk7XHJcbmNvbnN0IGRiXzEgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vZGJcIikpO1xyXG5mc18xLmRlZmF1bHQucmVhZEZpbGUoJy4vZGF0YS9lc3RyZWxsYXMuY3N2JywgJ3V0ZjgnLCAoZXJyLCBjb250ZW50KSA9PiB7XHJcbiAgICBpZiAoZXJyKVxyXG4gICAgICAgIHRocm93IEVycm9yKGVycik7XHJcbiAgICBjb25zdCBzZXBhcmF0b3IgPSAnLCc7XHJcbiAgICBsZXQgZGF0YSA9IGNvbnRlbnQudHJpbSgpLnNwbGl0KCdcXG4nKTtcclxuICAgIGNvbnN0IGtleXMgPSBkYXRhWzBdXHJcbiAgICAgICAgLnRvTG93ZXJDYXNlKClcclxuICAgICAgICAudHJpbSgpXHJcbiAgICAgICAgLnNwbGl0KHNlcGFyYXRvcik7XHJcbiAgICBjb25zdCBzdGFycyA9IGRhdGFcclxuICAgICAgICAuc2xpY2UoMSlcclxuICAgICAgICAubWFwKHMgPT4ge1xyXG4gICAgICAgIHJldHVybiBzXHJcbiAgICAgICAgICAgIC50cmltKClcclxuICAgICAgICAgICAgLnNwbGl0KHNlcGFyYXRvcilcclxuICAgICAgICAgICAgLnJlZHVjZSgobywgcywgaSkgPT4ge1xyXG4gICAgICAgICAgICBvW2tleXNbaV1dID0gaXNOYU4ocykgfHwgcyA9PT0gJycgPyBzIDogK3M7XHJcbiAgICAgICAgICAgIHJldHVybiBvO1xyXG4gICAgICAgIH0sIHt9KTtcclxuICAgIH0pO1xyXG4gICAgKGFzeW5jICgpID0+IHtcclxuICAgICAgICBhd2FpdCBkYl8xLmRlZmF1bHQuZXhlY1F1ZXJ5KGRiXzEuRnVuY3Rpb25zLmNyZWF0ZU1hbnksICdzdGFycycsIHt9LCB7IGRhdGE6IHN0YXJzIH0pO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdMb2FkaW5nIGRvbmUnKTtcclxuICAgIH0pKCk7XHJcbn0pO1xyXG4iXX0=