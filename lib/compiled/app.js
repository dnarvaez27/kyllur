"use strict";

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  }
  result["default"] = mod;
  return result;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var http_errors_1 = __importDefault(require("http-errors"));

var express_1 = __importStar(require("express"));

var path_1 = require("path");

var cookie_parser_1 = __importDefault(require("cookie-parser"));

var morgan_1 = __importDefault(require("morgan"));

var index_1 = __importDefault(require("./routes/index"));

var app = express_1["default"]();
app.use(morgan_1["default"]('dev'));
app.use(express_1.json());
app.use(express_1.urlencoded({
  extended: false
}));
app.use(cookie_parser_1["default"]());
app.use(express_1["static"](path_1.join(__dirname, '../../front/build')));
app.use('/stats', index_1["default"]); // catch 404 and forward to error handler

app.use(function (req, res, next) {
  next(http_errors_1["default"](404));
}); // error handler

app.use(function (err, req, res, next) {
  // set locals, only providing error in development
  res.locals.message = err.message;
  res.locals.error = req.app.get('env') === 'development' ? err : {}; // render the error page

  res.status(err.status || 500);
  res.send('error');
});
exports["default"] = app;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3RzL2FwcC5qcyJdLCJuYW1lcyI6WyJfX2ltcG9ydERlZmF1bHQiLCJtb2QiLCJfX2VzTW9kdWxlIiwiX19pbXBvcnRTdGFyIiwicmVzdWx0IiwiayIsIk9iamVjdCIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiaHR0cF9lcnJvcnNfMSIsInJlcXVpcmUiLCJleHByZXNzXzEiLCJwYXRoXzEiLCJjb29raWVfcGFyc2VyXzEiLCJtb3JnYW5fMSIsImluZGV4XzEiLCJhcHAiLCJ1c2UiLCJqc29uIiwidXJsZW5jb2RlZCIsImV4dGVuZGVkIiwiam9pbiIsIl9fZGlybmFtZSIsInJlcSIsInJlcyIsIm5leHQiLCJlcnIiLCJsb2NhbHMiLCJtZXNzYWdlIiwiZXJyb3IiLCJnZXQiLCJzdGF0dXMiLCJzZW5kIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxJQUFJQSxlQUFlLEdBQUksVUFBUSxTQUFLQSxlQUFkLElBQWtDLFVBQVVDLEdBQVYsRUFBZTtBQUNuRSxTQUFRQSxHQUFHLElBQUlBLEdBQUcsQ0FBQ0MsVUFBWixHQUEwQkQsR0FBMUIsR0FBZ0M7QUFBRSxlQUFXQTtBQUFiLEdBQXZDO0FBQ0gsQ0FGRDs7QUFHQSxJQUFJRSxZQUFZLEdBQUksVUFBUSxTQUFLQSxZQUFkLElBQStCLFVBQVVGLEdBQVYsRUFBZTtBQUM3RCxNQUFJQSxHQUFHLElBQUlBLEdBQUcsQ0FBQ0MsVUFBZixFQUEyQixPQUFPRCxHQUFQO0FBQzNCLE1BQUlHLE1BQU0sR0FBRyxFQUFiO0FBQ0EsTUFBSUgsR0FBRyxJQUFJLElBQVgsRUFBaUIsS0FBSyxJQUFJSSxDQUFULElBQWNKLEdBQWQ7QUFBbUIsUUFBSUssTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxJQUF0QixDQUEyQlAsR0FBM0IsRUFBZ0NJLENBQWhDLENBQUosRUFBd0NELE1BQU0sQ0FBQ0MsQ0FBRCxDQUFOLEdBQVlKLEdBQUcsQ0FBQ0ksQ0FBRCxDQUFmO0FBQTNEO0FBQ2pCRCxFQUFBQSxNQUFNLENBQUMsU0FBRCxDQUFOLEdBQW9CSCxHQUFwQjtBQUNBLFNBQU9HLE1BQVA7QUFDSCxDQU5EOztBQU9BRSxNQUFNLENBQUNHLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQUVDLEVBQUFBLEtBQUssRUFBRTtBQUFULENBQTdDOztBQUNBLElBQU1DLGFBQWEsR0FBR1osZUFBZSxDQUFDYSxPQUFPLENBQUMsYUFBRCxDQUFSLENBQXJDOztBQUNBLElBQU1DLFNBQVMsR0FBR1gsWUFBWSxDQUFDVSxPQUFPLENBQUMsU0FBRCxDQUFSLENBQTlCOztBQUNBLElBQU1FLE1BQU0sR0FBR0YsT0FBTyxDQUFDLE1BQUQsQ0FBdEI7O0FBQ0EsSUFBTUcsZUFBZSxHQUFHaEIsZUFBZSxDQUFDYSxPQUFPLENBQUMsZUFBRCxDQUFSLENBQXZDOztBQUNBLElBQU1JLFFBQVEsR0FBR2pCLGVBQWUsQ0FBQ2EsT0FBTyxDQUFDLFFBQUQsQ0FBUixDQUFoQzs7QUFDQSxJQUFNSyxPQUFPLEdBQUdsQixlQUFlLENBQUNhLE9BQU8sQ0FBQyxnQkFBRCxDQUFSLENBQS9COztBQUNBLElBQU1NLEdBQUcsR0FBR0wsU0FBUyxXQUFULEVBQVo7QUFDQUssR0FBRyxDQUFDQyxHQUFKLENBQVFILFFBQVEsV0FBUixDQUFpQixLQUFqQixDQUFSO0FBQ0FFLEdBQUcsQ0FBQ0MsR0FBSixDQUFRTixTQUFTLENBQUNPLElBQVYsRUFBUjtBQUNBRixHQUFHLENBQUNDLEdBQUosQ0FBUU4sU0FBUyxDQUFDUSxVQUFWLENBQXFCO0FBQUVDLEVBQUFBLFFBQVEsRUFBRTtBQUFaLENBQXJCLENBQVI7QUFDQUosR0FBRyxDQUFDQyxHQUFKLENBQVFKLGVBQWUsV0FBZixFQUFSO0FBQ0FHLEdBQUcsQ0FBQ0MsR0FBSixDQUFRTixTQUFTLFVBQVQsQ0FBaUJDLE1BQU0sQ0FBQ1MsSUFBUCxDQUFZQyxTQUFaLEVBQXVCLG1CQUF2QixDQUFqQixDQUFSO0FBQ0FOLEdBQUcsQ0FBQ0MsR0FBSixDQUFRLFFBQVIsRUFBa0JGLE9BQU8sV0FBekIsRSxDQUNBOztBQUNBQyxHQUFHLENBQUNDLEdBQUosQ0FBUSxVQUFDTSxHQUFELEVBQU1DLEdBQU4sRUFBV0MsSUFBWCxFQUFvQjtBQUN4QkEsRUFBQUEsSUFBSSxDQUFDaEIsYUFBYSxXQUFiLENBQXNCLEdBQXRCLENBQUQsQ0FBSjtBQUNILENBRkQsRSxDQUdBOztBQUNBTyxHQUFHLENBQUNDLEdBQUosQ0FBUSxVQUFDUyxHQUFELEVBQU1ILEdBQU4sRUFBV0MsR0FBWCxFQUFnQkMsSUFBaEIsRUFBeUI7QUFDN0I7QUFDQUQsRUFBQUEsR0FBRyxDQUFDRyxNQUFKLENBQVdDLE9BQVgsR0FBcUJGLEdBQUcsQ0FBQ0UsT0FBekI7QUFDQUosRUFBQUEsR0FBRyxDQUFDRyxNQUFKLENBQVdFLEtBQVgsR0FBbUJOLEdBQUcsQ0FBQ1AsR0FBSixDQUFRYyxHQUFSLENBQVksS0FBWixNQUF1QixhQUF2QixHQUF1Q0osR0FBdkMsR0FBNkMsRUFBaEUsQ0FINkIsQ0FJN0I7O0FBQ0FGLEVBQUFBLEdBQUcsQ0FBQ08sTUFBSixDQUFXTCxHQUFHLENBQUNLLE1BQUosSUFBYyxHQUF6QjtBQUNBUCxFQUFBQSxHQUFHLENBQUNRLElBQUosQ0FBUyxPQUFUO0FBQ0gsQ0FQRDtBQVFBekIsT0FBTyxXQUFQLEdBQWtCUyxHQUFsQiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcclxuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xyXG59O1xyXG52YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IGZ1bmN0aW9uIChtb2QpIHtcclxuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XHJcbiAgICB2YXIgcmVzdWx0ID0ge307XHJcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgcmVzdWx0W2tdID0gbW9kW2tdO1xyXG4gICAgcmVzdWx0W1wiZGVmYXVsdFwiXSA9IG1vZDtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgaHR0cF9lcnJvcnNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiaHR0cC1lcnJvcnNcIikpO1xyXG5jb25zdCBleHByZXNzXzEgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcImV4cHJlc3NcIikpO1xyXG5jb25zdCBwYXRoXzEgPSByZXF1aXJlKFwicGF0aFwiKTtcclxuY29uc3QgY29va2llX3BhcnNlcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJjb29raWUtcGFyc2VyXCIpKTtcclxuY29uc3QgbW9yZ2FuXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIm1vcmdhblwiKSk7XHJcbmNvbnN0IGluZGV4XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vcm91dGVzL2luZGV4XCIpKTtcclxuY29uc3QgYXBwID0gZXhwcmVzc18xLmRlZmF1bHQoKTtcclxuYXBwLnVzZShtb3JnYW5fMS5kZWZhdWx0KCdkZXYnKSk7XHJcbmFwcC51c2UoZXhwcmVzc18xLmpzb24oKSk7XHJcbmFwcC51c2UoZXhwcmVzc18xLnVybGVuY29kZWQoeyBleHRlbmRlZDogZmFsc2UgfSkpO1xyXG5hcHAudXNlKGNvb2tpZV9wYXJzZXJfMS5kZWZhdWx0KCkpO1xyXG5hcHAudXNlKGV4cHJlc3NfMS5zdGF0aWMocGF0aF8xLmpvaW4oX19kaXJuYW1lLCAnLi4vLi4vZnJvbnQvYnVpbGQnKSkpO1xyXG5hcHAudXNlKCcvc3RhdHMnLCBpbmRleF8xLmRlZmF1bHQpO1xyXG4vLyBjYXRjaCA0MDQgYW5kIGZvcndhcmQgdG8gZXJyb3IgaGFuZGxlclxyXG5hcHAudXNlKChyZXEsIHJlcywgbmV4dCkgPT4ge1xyXG4gICAgbmV4dChodHRwX2Vycm9yc18xLmRlZmF1bHQoNDA0KSk7XHJcbn0pO1xyXG4vLyBlcnJvciBoYW5kbGVyXHJcbmFwcC51c2UoKGVyciwgcmVxLCByZXMsIG5leHQpID0+IHtcclxuICAgIC8vIHNldCBsb2NhbHMsIG9ubHkgcHJvdmlkaW5nIGVycm9yIGluIGRldmVsb3BtZW50XHJcbiAgICByZXMubG9jYWxzLm1lc3NhZ2UgPSBlcnIubWVzc2FnZTtcclxuICAgIHJlcy5sb2NhbHMuZXJyb3IgPSByZXEuYXBwLmdldCgnZW52JykgPT09ICdkZXZlbG9wbWVudCcgPyBlcnIgOiB7fTtcclxuICAgIC8vIHJlbmRlciB0aGUgZXJyb3IgcGFnZVxyXG4gICAgcmVzLnN0YXR1cyhlcnIuc3RhdHVzIHx8IDUwMCk7XHJcbiAgICByZXMuc2VuZCgnZXJyb3InKTtcclxufSk7XHJcbmV4cG9ydHMuZGVmYXVsdCA9IGFwcDtcclxuIl19